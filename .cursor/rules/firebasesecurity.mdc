---
description: 
globs: 
alwaysApply: false
---
securityRules: {
  "firestore": `
    rules_version = '2';
    service cloud.firestore {
      match /databases/{database}/documents {
        // Kimlik doğrulanmış kullanıcılar
        function isAuthenticated() {
          return request.auth != null;
        }
        
        // Belgenin sahibi
        function isOwner(userId) {
          return isAuthenticated() && request.auth.uid == userId;
        }
        
        // Admin rolü
        function isAdmin() {
          return isAuthenticated() && 
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }
        
        // Kullanıcılar koleksiyonu
        match /users/{userId} {
          allow read: if isAuthenticated();
          allow create: if isAuthenticated() && request.auth.uid == userId;
          allow update: if isOwner(userId) || isAdmin();
          allow delete: if isAdmin();
        }
        
        // İlaçlar koleksiyonu
        match /drugs/{drugId} {
          allow read: if isAuthenticated();
          allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
          allow update: if isAuthenticated() && (
            resource.data.ownerId == request.auth.uid || isAdmin()
          );
          allow delete: if isAuthenticated() && (
            resource.data.ownerId == request.auth.uid || isAdmin()
          );
        }
        
        // Teklifler koleksiyonu
        match /offers/{offerId} {
          allow read: if isAuthenticated() && (
            resource.data.offererId == request.auth.uid || 
            resource.data.receiverId == request.auth.uid ||
            isAdmin()
          );
          allow create: if isAuthenticated() && request.resource.data.offererId == request.auth.uid;
          allow update: if isAuthenticated() && (
            resource.data.offererId == request.auth.uid || 
            resource.data.receiverId == request.auth.uid ||
            isAdmin()
          );
          allow delete: if isAuthenticated() && (
            resource.data.offererId == request.auth.uid || isAdmin()
          );
        }
        
        // İşlemler koleksiyonu
        match /transactions/{transactionId} {
          allow read: if isAuthenticated() && (
            resource.data.sellerId == request.auth.uid || 
            resource.data.buyerId == request.auth.uid ||
            isAdmin()
          );
          allow create: if isAuthenticated() && (
            request.resource.data.buyerId == request.auth.uid ||
            request.resource.data.sellerId == request.auth.uid
          );
          allow update: if isAuthenticated() && (
            resource.data.sellerId == request.auth.uid || 
            resource.data.buyerId == request.auth.uid ||
            isAdmin()
          );
          allow delete: if isAdmin();
        }
      }
    }
  `,
  "storage": `
    rules_version = '2';
    service firebase.storage {
      match /b/{bucket}/o {
        // Kimlik doğrulanmış kullanıcılar
        function isAuthenticated() {
          return request.auth != null;
        }
        
        // İlaç görselleri
        match /drug_images/{imageId} {
          allow read: if isAuthenticated();
          allow write: if isAuthenticated();
        }
        
        // Fatura dosyaları
        match /invoices/{invoiceId} {
          allow read: if isAuthenticated() && (
            resource.metadata.sellerId == request.auth.uid ||
            resource.metadata.buyerId == request.auth.uid
          );
          allow write: if isAuthenticated() && (
            request.resource.metadata.sellerId == request.auth.uid ||
            request.resource.metadata.buyerId == request.auth.uid
          );
        }
      }
    }
  `
}