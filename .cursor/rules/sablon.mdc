---
description: 
globs: 
alwaysApply: false
---
templates: {
  "viewModel": `import SwiftUI
import Firebase
import FirebaseFirestore
import FirebaseFirestoreSwift

class ${Name}ViewModel: ObservableObject {
    @Published var isLoading = false
    @Published var errorMessage: String?
    private let db = Firestore.firestore()
    
    init() {
        // İlklendirme kodları
    }
    
    func fetchData() async throws {
        isLoading = true
        defer { isLoading = false }
        
        // Firebase'den veri çekme işlemleri
    }
}`,

  "view": `import SwiftUI
import Firebase

struct ${Name}View: View {
    @StateObject private var viewModel = ${Name}ViewModel()
    
    var body: some View {
        VStack {
            if viewModel.isLoading {
                ProgressView()
            } else {
                // Ana içerik
            }
        }
        .alert(item: $viewModel.errorMessage) { error in
            Alert(title: Text("Hata"), message: Text(error), dismissButton: .default(Text("Tamam")))
        }
        .task {
            do {
                try await viewModel.fetchData()
            } catch {
                viewModel.errorMessage = error.localizedDescription
            }
        }
    }
}

#Preview {
    ${Name}View()
}`,

  "model": `import Foundation
import FirebaseFirestore
import FirebaseFirestoreSwift

struct ${Name}: Identifiable, Codable {
    @DocumentID var id: String?
    var name: String
    var createdAt: Timestamp
    var updatedAt: Timestamp
    
    enum CodingKeys: String, CodingKey {
        case id
        case name
        case createdAt
        case updatedAt
    }
}`,

  "firebaseService": `import Foundation
import Firebase
import FirebaseFirestore
import FirebaseFirestoreSwift

protocol ${Name}ServiceProtocol {
    func fetchData() async throws -> [${DataType}]
    func add${DataType}(_ item: ${DataType}) async throws -> String
    func update${DataType}(_ item: ${DataType}) async throws
    func delete${DataType}(id: String) async throws
}

class ${Name}Service: ${Name}ServiceProtocol {
    private let db = Firestore.firestore()
    private let collectionPath = "${collectionName}"
    
    func fetchData() async throws -> [${DataType}] {
        let snapshot = try await db.collection(collectionPath).getDocuments()
        return try snapshot.documents.compactMap { document in
            try document.data(as: ${DataType}.self)
        }
    }
    
    func add${DataType}(_ item: ${DataType}) async throws -> String {
        let docRef = try db.collection(collectionPath).addDocument(from: item)
        return docRef.documentID
    }
    
    func update${DataType}(_ item: ${DataType}) async throws {
        guard let id = item.id else {
            throw NSError(domain: "Invalid ID", code: 400)
        }
        try db.collection(collectionPath).document(id).setData(from: item)
    }
    
    func delete${DataType}(id: String) async throws {
        try await db.collection(collectionPath).document(id).delete()
    }
}`
}